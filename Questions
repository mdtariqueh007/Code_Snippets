Cost of String

int solve(const string& S) {
    vector<int> freq(26, 0);

    for (char c : S) {
        freq[c - 'a']++;
    }

    int total = 0;

    for (int i = 0; i < 26; ++i) {
        for (int j = i + 1; j < 26; ++j) {
            total += freq[i] * freq[j] * abs(i - j);
        }
    }

    return total;
}

Good Sets

int solve(const string& s) {
    vector<int> lc;
    for (int i = 0; i < s.size(); ++i) {
        if (islower(s[i])) {
            lc.push_back(i);
        }
    }

    int m = 0;
    int c = 0;
    int p = -1;
    for (int i : lc) {
        if (p == -1 || s.substr(p + 1, i - p).compare(s.substr(p + 1, i - p)) != 0) {
            c += 1;
        } else {
            c = 1;
        }
        m = max(m, c);
        p = i;
    }

    return m;
}


Good Pair

#include <iostream>
#include <vector>
using namespace std;
vector<bool> sieve(int max_val) {
    vector<bool> is_prime(max_val + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= max_val; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= max_val; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return is_prime;
}

int main() {
    int N;
    cin >> N;

    vector<int> A(N);
    int max_val = 0;
    for (int i = 0; i < N; ++i) {
        cin >> A[i];
        if (A[i] > max_val) {
            max_val = A[i];
        }
    }

    vector<bool> is_prime = sieve(max_val);

    int prime_count = 0, composite_count = 0;
    for (int i = 0; i < N; ++i) {
        if (is_prime[A[i]]) {
            prime_count++;
        } else {
            composite_count++;
        }
    }

    int good_pairs = prime_count * composite_count;
    cout << good_pairs << endl;

    return 0;
}


Minimal Strings



#include <iostream>
#include <unordered_set>
#include <string>
using namespace std;
void generateSubstrings(const string &s, int len, unordered_set<string> &substrings) {
    for (int i = 0; i <= s.size() - len; ++i) {
        substrings.insert(s.substr(i, len));
    }
}

string findMinimalString(const string &s) {
    unordered_set<string> substrings;
    for (int len = 1; ; ++len) {
        substrings.clear();
        generateSubstrings(s, len, substrings);
        string candidate(len, 'a');
        while (true) {
            if (substrings.find(candidate) == substrings.end()) {
                return candidate;
            }
            int pos = len - 1;
            while (pos >= 0 && candidate[pos] == 'z') {
                candidate[pos] = 'a';
                --pos;
            }
            if (pos < 0) break;
            ++candidate[pos];
        }
    }
}

int main() {
    string S;
    cin >> S;
    cout << findMinimalString(S) << endl;
    return 0;
}





//////////////////////////////

Prime Tree
Number of Partition
Maximizing Profit
Palindrome Triplet

/////////////////////


////// Prime Tree //////////////


prime tree
prime tree
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

const int MOD = 1e9 + 7;
const int MAXN = 101; 

vector<int> primes;
vector<vector<int>> adj;
vector<vector<long long>> dp;
bool is_prime[MAXN];

void sieve() {
    fill(is_prime, is_prime + MAXN, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i < MAXN; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = 2 * i; j < MAXN; j += i) {
                is_prime[j] = false;
            }
        }
    }
}

void preprocess(int N) {
    sieve();
    adj.clear();
    adj.resize(N);
    dp.clear();
    dp.assign(N, vector<long long>(primes.size(), 1));    
}

void dfs(int node, int par = -1) {
    for (int ne : adj[node]) {
        if (ne == par) continue;
        dfs(ne, node);        
        
        for (int i = 0; i < (int)primes.size(); i++) {
            long long t = 0;
            for (int j = 0; j < (int)primes.size(); j++) {
                if (is_prime[primes[i] + primes[j]]) continue;
                t += dp[ne][j];
                t %= MOD;
            }
            dp[node][i] *= t;
            dp[node][i] %= MOD;
        }
    }
}

int solve(int N, vector<vector<int>> edges) {
    preprocess(N);
    
    if (N == 1) return primes.size();
    
    for (vector<int> edge : edges) {
        adj[edge[0]].push_back(edge[1]);
        adj[edge[1]].push_back(edge[0]);     
    }
    
    dfs(0);
    long long ans = 0;
    
    for (int i = 0; i < (int)primes.size(); i++) {
        ans += dp[0][i];
        ans %= MOD;
    }
    
    return ans;
}

int main() {
    int N;
    cin >> N;
    vector<vector<int>> edges(N-1, vector<int>(2));
    for (int i = 0; i < N-1; i++) {
        cin >> edges[i][0] >> edges[i][1];
        edges[i][0]--; 
        edges[i][1]--;
    }

    cout << solve(N, edges) << endl;
    return 0;
}

///////////////////////////

//////////// NUmber of Partitions ////////////////////

def solve(N, ar):
    def gs(ar):
        return sum(ar)

    k = 0
    n = N
    ts = gs(ar)
    ps = [0] * n
    lc, rc = {}, {}

    ps[0] = ar[0]
    for i in range(1, n):
        ps[i] = ps[i - 1] + ar[i]

    for i in range(n - 1):
        rc[ps[i]] = rc.get(ps[i], 0) + 1

    mp = 0

    for i in range(n - 1):
        if 2 * ps[i] == ts:
            mp += 1

    for i in range(n):
        cu = ar[i]
        di = k - cu

        if i > 0:
            rc[ps[i - 1]] -= 1

        for j in range(n - 1):
            ls = ps[j]
            rs = ts - ls

            if 2 * ls + di == ts:
                mp += 1

        if i > 0:
            rc[ps[i - 1]] += 1

    return mp

T = int(input())

for _ in range(T):
    N = int(input())
    ar = list(map(int, input().split()))
    out_ = solve(N, ar)
    print(out_)
//////////////////////////////////////

/////////////////////Palindrome Triplet///////////////////

def pc(S):
    n = len(S)
    ip = [[False] * n for _ in range(n)]
    for i in range(n):
        ip[i][i] = True
    for ln in range(2, n + 1):
        for i in range(n - ln + 1):
            j = i + ln - 1
            if S[i] == S[j]:
                if ln == 2:
                    ip[i][j] = True
                else:
                    ip[i][j] = ip[i + 1][j - 1]
    return ip

def solve(n, S):
    ip = pc(S)
    
    dl = [0] * n
    for i in range(n):
        for j in range(i + 1):
            if ip[j][i]:
                dl[i] += 1
        if i > 0:
            dl[i] += dl[i - 1]
    
    dr = [0] * n
    for i in range(n - 1, -1, -1):
        for j in range(i, n):
            if ip[i][j]:
                dr[i] += 1
        if i < n - 1:
            dr[i] += dr[i + 1]
    
    gt = 0
    for i in range(1, n - 1):
        for j in range(i, n - 1):
            if ip[i][j]:
                gt += dl[i - 1] * dr[j + 1]
    
    return gt

T = int(input())
for _ in range(T):
    n = int(input())
    S = input()
    out_ = solve(n, S)
    print(out_)
//////////////////////////////////////

///// Prime Tree /////////////


def s(n, pr):
    prime = [True] * (n + 1)
    for p in range(2, int(n ** 0.5) + 1):
        if prime[p]:
            for i in range(p * p, n + 1, p):
                prime[i] = False
    for i in range(2, n + 1):
        if prime[i]:
            pr.append(i)

def t(n, pr):
    return n in pr

def coder(s, p, mod, a, dp, pr):
    for i in range(25):
        dp[s][i] = 1
    for u in a[s]:
        if u != p:
            coder(u, s, mod, a, dp, pr)
            for i in range(25):
                pos = 0
                for j in range(25):
                    if not t(pr[i] + pr[j], pr):
                        pos = (pos + dp[u][j]) % mod
                dp[s][i] = (dp[s][i] * pos) % mod

def f(n, edges):
    mod = 1000000007
    pr = []
    s(200, pr)
    dp = [[0] * 25 for _ in range(n + 1)]
    a = [[] for _ in range(n + 1)]
    for i in range(n - 1):
        a[edges[i][0]].append(edges[i][1])
        a[edges[i][1]].append(edges[i][0])
    coder(1, -1, mod, a, dp, pr)
    ans = 0
    for i in range(25):
        ans = (ans + dp[1][i]) % mod
    return ans
///////////////////////////////////////


////////////////// Maximising Profit /////////////////////


#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

// Function to calculate the maximum sum of money
int maximizeProfit(vector<int> &C, vector<int> &D, int n) {
    int itemCount = C.size();
    vector<pair<int, int>> items(itemCount);
    
    // Combine costs and delivery prices into a vector of pairs
    for (int i = 0; i < itemCount; ++i) {
        items[i] = {C[i], D[i]};
    }
    
    // Sort items based on their total value (cost + delivery price)
    sort(items.begin(), items.end(), [](const pair<int, int> &a, const pair<int, int> &b) {
        return (a.first + a.second) > (b.first + b.second);
    });
    
    // Select the top n items
    vector<int> selectedDeliveryPrices;
    int totalCost = 0;
    
    for (int i = 0; i < n; ++i) {
        totalCost += items[i].first;
        selectedDeliveryPrices.push_back(items[i].second);
    }
    
    // Find the minimum delivery price among the selected items
    int minDeliveryPrice = *min_element(selectedDeliveryPrices.begin(), selectedDeliveryPrices.end());
    
    // Add the delivery prices to the total cost
    totalCost += n * minDeliveryPrice;
    
    return totalCost;
}

int main() {
    // Example input
    vector<int> C = {10, 20, 30, 40};
    vector<int> D = {5, 4, 3, 2};
    int n = 2;
    
    // Calculate the maximum profit
    int result = maximizeProfit(C, D, n);
    
    // Output the result
    cout << "Maximum profit: " << result << endl;
    
    return 0;
}



////////////////////////////////


/////////// Google OA 13th July ////////////////////////

Find Palindrome
Complex Subsequence
First Subsequence
Or Xor
String machine
Subtree XOR
Maximum length Subarray
Range Function

////////////////////////////////////////////////////////


/////// String Machine ///////////////////


String Machine Google ✅

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool ok(int x, string &s1, string &s2, int n, int m, vector<int> &P) {
    vector<pair<int, int>> t;
    for (int i = 0; i <= x; i++) {
        t.push_back({P[i], s2[P[i] - 1] - 'a'});
    }
    sort(t.begin(), t.end());

    int i = 0, j = 0;
    while (i < s1.size() && j < t.size()) {
        if (s1[i] - 'a' == t[j].second) {
            j++;
            i++;
        }
        else j++;
    }
    return i == t.size();
}

int solve(int N, string s1, int M, string s2, vector<int> P) {
    int l = 0, h = M - 1;
    int ans = -1;
    while (l <= h) {
        int mid = (l + h) / 2;
        if (ok(mid, s1, s2, N, M, P)) {
            ans = mid + 1;
            h = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T;
    cin >> T;
    for (int t = 0; t < T; t++) {
        int N, M;
        string s1, s2;
        cin >> N >> s1 >> M >> s2;

        vector<int> P(M);
        for (int i = 0; i < M; i++) {
            cin >> P[i];
        }

        cout << solve(N, s1, M, s2, P) << endl;
    }

    return 0;
}

///////////////////////////////////////


/////////////////// First Subsequence ///////////////////////

int solve(string A, string B) {
    int n = A.size(), m = B.size();
    for (int start = 0; start < n; ++start) {
        bool usedChange = false;
        int i = start, j = 0;
        while (i < n && j < m) {
            if (A[i] == B[j]) {
                i++; j++;
            } else if (!usedChange && j > 0) { 
                usedChange = true;
                j++; 
            } else {
                break;
            }
        }
        if (j == m) return start;
    }
    return -1; 
}


////////////////////////////////////////////////


///////////// Range Function /////////////

#include<bits/stdc++.h>
using namespace std;
#define int long long

struct Node {
    int tot = 0, sum = 0, pref = 0, suf = 0, len = 0;

    void init(int val) {
        tot = sum = pref = suf = val;
        len = 1;
    }
} test;

Node merge(Node a, Node b) {
    Node res;
    res.tot = a.tot + b.tot + a.suf * b.len + b.pref * a.len;
    res.sum = a.sum + b.sum;
    res.pref = a.pref + a.sum * b.len + b.pref;
    res.suf = b.suf + b.sum * a.len + a.suf;
    res.len = a.len + b.len;
    return res;
}

class SGTree {
    vector<Node>seg;
public:
    SGTree(int n)
    {
        seg.resize(4 * n);
    }

    void build (int ind, int low, int high, vector<int>&arr)
    {
        if (low == high)
        {
            seg[ind].init(arr[low]);
            return;
        }

        int mid = (low + high) >> 1;
        build(2 * ind + 1, low, mid, arr);
        build(2 * ind + 2, mid + 1, high, arr);
        seg[ind] = merge(seg[2 * ind + 1] , seg[2 * ind + 2]);
    }

    Node query(int ind, int low, int high, int l, int r)
    {
        if (r < low || high < l)return test;

        if (l <= low && high <= r)return seg[ind];

        int mid = (low + high) >> 1;
        Node left = query(2 * ind + 1, low, mid, l, r);
        Node right = query(2 * ind + 2, mid + 1, high, l, r);
        return merge(left , right);
    }

    void update(int ind, int low, int high, int i, int val)
    {
        if (low == high)
        {
            seg[ind].init(val);
            return;
        }

        int mid = (low + high) >> 1;
        if (i <= mid)update(2 * ind + 1, low, mid, i, val);
        else update(2 * ind + 2, mid + 1, high, i, val);
        seg[ind] = merge(seg[2 * ind + 1] , seg[2 * ind + 2]);
    }

};

signed main() {
    int t; cin >> t;
    while (t--) {
        int n, q; cin >> n >> q;
        vector<int>v(n);
        for (int i = 0; i < n; ++i)
        {
            cin >> v[i];
        }
        SGTree sgt(n);
        sgt.build(0, 0, n - 1, v);
        vector<int>res;
        while (q--) {
            int type; cin >> type;
            if (type == 1) {
                int ind, val; cin >> ind >> val;
                ind--;
                sgt.update(0, 0, n - 1, ind, val);
            }
            else {
                int l, r; cin >> l >> r;
                l--;
                r--;
                int temp = 0;

                temp += sgt.query(0, 0, n - 1, l, r).tot;

                res.push_back(temp);
            }
        }
        for (int i = 0; i < res.size(); ++i)
        {
            cout << res[i] << " ";
        }
        cout << endl;
    }
}


//////////////////////////////////////////








///////////////////// GOOGLE 20 JULY ///////////////////////

Cost Optimization
Max Partition
Reckon String
Subset Queries
Collection of Items
Awesome Factor
3 Numbers
Min cost connection 


//////////////////////////////

Cost Optimization

#include <iostream>
#include <vector>
#include <deque>
#include <climits>

using namespace std;

struct Cell {
    int x, y, cost;
};

int dir_cost(char dir, int from_x, int from_y, int to_x, int to_y) {
    if ((dir == 'L' && to_y == from_y - 1) ||
        (dir == 'R' && to_y == from_y + 1) ||
        (dir == 'U' && to_x == from_x - 1) ||
        (dir == 'D' && to_x == from_x + 1)) {
        return 0;
    }
    return 1;
}

int min_cost_to_reach(vector<vector<char>>& grid, int sx, int sy, int dx, int dy) {
    int n = grid.size();
    vector<vector<int>> cost(n, vector<int>(n, INT_MAX));
    deque<Cell> dq;

    cost[sx][sy] = 0;
    dq.push_front({sx, sy, 0});

    int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    while (!dq.empty()) {
        Cell current = dq.front();
        dq.pop_front();

        int cx = current.x, cy = current.y, c_cost = current.cost;

        for (auto& dir : directions) {
            int nx = cx + dir[0];
            int ny = cy + dir[1];

            if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                int new_cost = c_cost + dir_cost(grid[cx][cy], cx, cy, nx, ny);
                if (new_cost < cost[nx][ny]) {
                    cost[nx][ny] = new_cost;
                    if (dir_cost(grid[cx][cy], cx, cy, nx, ny) == 0) {
                        dq.push_front({nx, ny, new_cost});
                    } else {
                        dq.push_back({nx, ny, new_cost});
                    }
                }
            }
        }
    }

    return cost[dx][dy];
}

int main() {
    int n;
    cin >> n;
    vector<vector<char>> grid(n, vector<char>(n));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> grid[i][j];
        }
    }

    int sx, sy, dx, dy;
    cin >> sx >> sy >> dx >> dy;
    sx--; sy--; dx--; dy--;

    cout << min_cost_to_reach(grid, sx, sy, dx, dy) << endl;

    return 0;
}

//////////////////////////////








Queruies and Arrays


#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;

const int MOD = 1e9 + 7;

bool canAchieveMinValue(int minValue, const vector<int>& A, const vector<int>& B, long long& totalCost) {
    int N = A.size();
    vector<int> surplus, deficit;
    totalCost = 0;
    
    for (int i = 0; i < N; ++i) {
        if (A[i] > minValue) {
            surplus.push_back(A[i] - minValue);
        } else if (A[i] < minValue) {
            if (minValue > B[i]) {
                deficit.push_back(minValue - A[i]);
            } else {
                return false; // If minValue is less than or equal to B[i], it's infeasible.
            }
        }
    }

    long long surplusSum = accumulate(surplus.begin(), surplus.end(), 0LL);
    long long deficitSum = accumulate(deficit.begin(), deficit.end(), 0LL);

    if (surplusSum < deficitSum) return false; // Not enough surplus to cover the deficit.
    
    // Calculate the cost to equalize A to at least minValue
    for (int d : deficit) {
        totalCost = (totalCost + d) % MOD;
    }
    
    return true;
}

pair<int, long long> solve(int N, const vector<int>& A, const vector<int>& B) {
    int low = *min_element(B.begin(), B.end());
    int high = *max_element(A.begin(), A.end());
    int bestMinValue = low;
    long long bestCost = 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        long long totalCost;
        
        if (canAchieveMinValue(mid, A, B, totalCost)) {
            bestMinValue = mid;
            bestCost = totalCost;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return {bestMinValue, bestCost};
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;
        
        vector<int> A(N), B(N), C(N);
        
        for (int i = 0; i < N; ++i) cin >> A[i];
        for (int i = 0; i < N; ++i) cin >> B[i];
        
        auto result = solve(N, A, B);
        cout << result.first << " " << result.second << "\n";
    }

    return 0;
}







Maximum Strength


int n;
   cin >> n;
   vector<int> a(n);
   for(int i =0;i<n;i++){
      cin >> a[i];
   }
   set<int> s1;
   for(int i =0;i<=32;i++){
      s1.insert((1<<i) - 1);
   }
   sort(a.begin(),a.end());
   int maxlen = 0;
   int orval = 0;
   bool flag = false;
   for(int i=0;i<n;i++){
      orval  |= a[i];
      if(s1.find(orval) != s1.end()){
         
         maxlen = 1 + i;
      }
   }
   cout << n - maxlen << endl;
    
}



Maximum Gain


bool checkHere(ll n){  
    for(ll i = 2; i * i <= n; i++){  
        if(n % i == 0) return false;  
    }  
    return true;  
}  
  
ll find(ll n){  
    vector<ll> black;  
    while(black.size() < 2){  
        if(checkHere(n)) black.push_back(n);  
        n++;  
    }  
    return black[0] * black[1];  
}  
  
signed main() {  
    ll tt;  
    cin >> tt;  
    while(tt--){  
        ll n;  
        cin >> n;  
        if(n == 1) n++;  
        cout << find(n) << endl;  
    }  
    return 0;  
}




